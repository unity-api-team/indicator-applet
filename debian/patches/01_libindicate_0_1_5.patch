=== modified file 'src/__init__.py'
--- old/src/__init__.py	2009-03-23 20:21:14 +0000
+++ new/src/__init__.py	2009-04-08 19:32:37 +0000
@@ -26,8 +26,15 @@
 from _indicate import *
 import ctypes
 
+INTEREST_NONE = 0
+INTEREST_SERVER_DISPLAY = 1
+INTEREST_SERVER_SIGNAL = 2
+INTEREST_INDICATOR_DISPLAY = 3
+INTEREST_INDICATOR_SIGNAL = 4
+INTEREST_INDICATOR_COUNT = 5
+
 def server_dbus_name(gpointer):
-    p = int(str(gpointer)[13:-1],16)
+    p = int(str(gpointer)[13:-1], 16)
     try:
         rv = ctypes.cast(p,ctypes.c_char_p).value
     except ctypes.ArgumentError:
@@ -36,3 +43,4 @@
 
 def indicator_id(gpointer):
     return int(str(gpointer)[13:-1],16)
+

=== modified file 'src/indicate-arg-types.py'
--- old/src/indicate-arg-types.py	2009-03-23 20:21:14 +0000
+++ new/src/indicate-arg-types.py	2009-04-08 19:32:37 +0000
@@ -25,10 +25,5 @@
 
 import argtypes
 
-argtypes.matcher.register('IndicateListenerServer', argtypes.CharArg())
-
-argtypes.matcher.register('IndicateListenerServer*', argtypes.StringArg())
- 
-argtypes.matcher.register('IndicateListenerIndicator', argtypes.UIntArg())
-
+argtypes.matcher.register('IndicateInterests', argtypes.UIntArg())
 

=== modified file 'src/indicate.defs'
--- old/src/indicate.defs	2009-03-12 21:17:51 +0000
+++ new/src/indicate.defs	2009-04-08 19:32:37 +0000
@@ -231,6 +231,48 @@
   )
 )
 
+(define-method get_dbusname
+  (of-object "IndicateListenerServer")
+  (c-name "indicate_listener_server_get_dbusname")
+  (return-type "const-gchar*")
+)
+
+(define-method get_id
+  (of-object "IndicateListenerIndicator")
+  (c-name "indicate_listener_indicator_get_id")
+  (return-type "guint")
+)
+
+(define-method server_show_interest
+  (of-object "IndicateListener")
+  (c-name "indicate_listener_server_show_interest")
+  (return-type "none")
+  (parameters
+    '("IndicateListenerServer*" "server")
+    '("IndicateInterests" "interest")
+  )
+)
+
+(define-method server_remove_interest
+  (of-object "IndicateListener")
+  (c-name "indicate_listener_server_remove_interest")
+  (return-type "none")
+  (parameters
+    '("IndicateListenerServer*" "server")
+    '("IndicateInterests" "interest")
+  )
+)
+
+(define-method server_check_interest
+  (of-object "IndicateListener")
+  (c-name "indicate_listener_server_check_interest")
+  (return-type "gboolean")
+  (parameters
+    '("IndicateListenerServer*" "server")
+    '("IndicateInterests" "interest")
+  )
+)
+
 
 
 ;; From listener-marshal.h
@@ -323,93 +365,6 @@
   (return-type "none")
 )
 
-(define-method get_indicator_count
-  (of-object "IndicateServer")
-  (c-name "indicate_server_get_indicator_count")
-  (return-type "gboolean")
-  (parameters
-    '("guint*" "count")
-    '("GError**" "error")
-  )
-)
-
-(define-method get_indicator_count_by_type
-  (of-object "IndicateServer")
-  (c-name "indicate_server_get_indicator_count_by_type")
-  (return-type "gboolean")
-  (parameters
-    '("gchar*" "type")
-    '("guint*" "count")
-    '("GError**" "error")
-  )
-)
-
-(define-method get_indicator_list
-  (of-object "IndicateServer")
-  (c-name "indicate_server_get_indicator_list")
-  (return-type "gboolean")
-  (parameters
-    '("GArray**" "indicators")
-    '("GError**" "error")
-  )
-)
-
-(define-method get_indicator_list_by_type
-  (of-object "IndicateServer")
-  (c-name "indicate_server_get_indicator_list_by_type")
-  (return-type "gboolean")
-  (parameters
-    '("gchar*" "type")
-    '("guint**" "indicators")
-    '("GError**" "error")
-  )
-)
-
-(define-method get_indicator_property
-  (of-object "IndicateServer")
-  (c-name "indicate_server_get_indicator_property")
-  (return-type "gboolean")
-  (parameters
-    '("guint" "id")
-    '("gchar*" "property")
-    '("gchar**" "value")
-    '("GError**" "error")
-  )
-)
-
-(define-method get_indicator_property_group
-  (of-object "IndicateServer")
-  (c-name "indicate_server_get_indicator_property_group")
-  (return-type "gboolean")
-  (parameters
-    '("guint" "id")
-    '("GPtrArray*" "properties")
-    '("gchar***" "value")
-    '("GError**" "error")
-  )
-)
-
-(define-method get_indicator_properties
-  (of-object "IndicateServer")
-  (c-name "indicate_server_get_indicator_properties")
-  (return-type "gboolean")
-  (parameters
-    '("guint" "id")
-    '("gchar***" "properties")
-    '("GError**" "error")
-  )
-)
-
-(define-method show_indicator_to_user
-  (of-object "IndicateServer")
-  (c-name "indicate_server_show_indicator_to_user")
-  (return-type "gboolean")
-  (parameters
-    '("guint" "id")
-    '("GError**" "error")
-  )
-)
-
 (define-method emit_indicator_added
   (of-object "IndicateServer")
   (c-name "indicate_server_emit_indicator_added")
@@ -447,3 +402,7 @@
 )
 
 
+
+;; From interests.h
+
+

=== modified file 'src/indicate.override'
--- old/src/indicate.override	2009-03-23 20:21:14 +0000
+++ new/src/indicate.override	2009-04-08 19:32:37 +0000
@@ -31,6 +31,7 @@
 #include <libindicate/indicator-message.h>
 #include <libindicate/listener.h>
 #include <libindicate/server.h>
+#include <libindicate/interests.h>
 #include <glib.h>
 #include "pygobject.h"
 #include "pyglib.h"
@@ -61,17 +62,17 @@
 
         if (data->user_data == Py_None)
         {
-                args = Py_BuildValue("OsisO", data->listener, 
-                                     (gchar *) server, 
-                                     (guint) indicator,
+                args = Py_BuildValue("OOOsO", data->listener, 
+                                      server, 
+                                      indicator,
                                      property,
                                      pypropertydata);
         }
         else
         {
-                args = Py_BuildValue("OsisOO", data->listener, 
-                                     (gchar *) server, 
-                                     (guint) *indicator,
+                args = Py_BuildValue("OOOsOO", data->listener, 
+                                      server, 
+                                      indicator,
                                      property,
                                      pypropertydata,
                                      data->user_data);
@@ -106,14 +107,14 @@
 
 		if (data->user_data == Py_None)
 		{
-				args = Py_BuildValue("Oss", data->listener, 
-									 (gchar *) server, 
+				args = Py_BuildValue("OOs", data->listener, 
+									 server, 
 									 value);
 		}
 		else
 		{
-				args = Py_BuildValue("OssO", data->listener, 
-									 (gchar *) server, 
+				args = Py_BuildValue("OOsO", data->listener, 
+									 server, 
 									 value,
 									 data->user_data);
 		}
@@ -196,8 +197,9 @@
 		static char *kwlist[] = { "server", "indicator", "property", "callback",
 								  "user_data", NULL };
 		ListenerPropertyCbData *listener_property_cb_data;
-		gchar *server, *property;
-		guint indicator;
+		IndicateListenerServer *server;
+		gchar *property;
+		IndicateListenerIndicator *indicator;
 		PyGILState_STATE state;
 		PyObject *callback, *user_data = Py_None;
 		size_t len;
@@ -215,7 +217,7 @@
 		}
 
 		if (!PyArg_ParseTupleAndKeywords(args, kwargs,
-										 "sisO|O:IndicateListener.get_property",
+										 "OOsO|O:IndicateListener.get_property",
 										 kwlist,
 										 &server, &indicator, &property, &callback, &user_data))
 		{
@@ -238,8 +240,8 @@
 		Py_INCREF(user_data);
 
 		indicate_listener_get_property(INDICATE_LISTENER(self->obj),
-									   (IndicateListenerServer *)server, 
-									   (IndicateListenerIndicator *)indicator,
+									   server, 
+									   indicator,
 									   property,
 									   (indicate_listener_get_property_cb)_listener_get_property_cb,
 									   listener_property_cb_data);
@@ -264,8 +266,9 @@
 		static char *kwlist[] = { "server", "indicator", "property", "callback",
 								  "user_data", NULL };
 		ListenerPropertyCbData *listener_property_cb_data;
-		gchar *server, *property;
-		guint indicator;
+		IndicateListenerServer *server; 
+		gchar *property;
+		IndicateListenerIndicator * indicator;
 		PyGILState_STATE state;
 		PyObject *callback, *user_data = Py_None;
 		size_t len;
@@ -283,7 +286,7 @@
 		}
 
 		if (!PyArg_ParseTupleAndKeywords(args, kwargs,
-										 "sisO|O:IndicateListener.get_property",
+										 "OOsO|O:IndicateListener.get_property",
 										 kwlist,
 										 &server, &indicator, &property, &callback, &user_data))
 		{
@@ -307,8 +310,8 @@
 
 		indicate_listener_get_property_icon(
 				INDICATE_LISTENER(self->obj),
-				(IndicateListenerServer *)server, 
-				(IndicateListenerIndicator *)indicator,
+				server, 
+				indicator,
 				property,
 				(indicate_listener_get_property_icon_cb)_listener_get_property_cb,
 				listener_property_cb_data);
@@ -334,8 +337,9 @@
 		static char *kwlist[] = { "server", "indicator", "property", "callback",
 								  "user_data", NULL };
 		ListenerPropertyCbData *listener_property_cb_data;
-		gchar *server, *property;
-		guint indicator;
+		IndicateListenerServer *server;
+		gchar *property;
+		IndicateListenerIndicator *indicator;
 		PyGILState_STATE state;
 		PyObject *callback, *user_data = Py_None;
 		size_t len;
@@ -353,7 +357,7 @@
 		}
 
 		if (!PyArg_ParseTupleAndKeywords(args, kwargs,
-										 "sisO|O:IndicateListener.get_property",
+										 "OOsO|O:IndicateListener.get_property",
 										 kwlist,
 										 &server, &indicator, &property, &callback, &user_data))
 		{
@@ -376,8 +380,8 @@
 		Py_INCREF(user_data);
 
 		indicate_listener_get_property_time(INDICATE_LISTENER(self->obj),
-											(IndicateListenerServer *)server, 
-											(IndicateListenerIndicator *)indicator,
+											server, 
+											indicator,
 											property,
 											(indicate_listener_get_property_time_cb)_listener_get_property_cb,
 											listener_property_cb_data);
@@ -386,19 +390,6 @@
 		pyg_gil_state_release(state);
 		return Py_None;
 }
-
-%%
-override indicate_server_get_indicator_count
-static PyObject *
-_wrap_indicate_server_get_indicator_count(PyGObject *self)
-{
-        guint count;
-        GError * error = NULL;
-        indicate_server_get_indicator_count(
-                INDICATE_SERVER(self->obj), &count, &error);
-        
-        return PyLong_FromUnsignedLong(count);
-}
 %%
 override indicate_listener_server_get_desktop kwargs
 static PyObject *
@@ -408,7 +399,7 @@
 {
 		static char *kwlist[] = { "server", "callback", "user_data", NULL };
 		ListenerPropertyCbData *listener_property_cb_data;
-		gchar *server;
+		IndicateListenerServer *server;
 		PyGILState_STATE state;
 		PyObject *callback, *user_data = Py_None;
 		size_t len;
@@ -426,7 +417,7 @@
 		}
 
 		if (!PyArg_ParseTupleAndKeywords(args, kwargs,
-										 "sO|O:IndicateListener.get_property",
+										 "OO|O:IndicateListener.get_property",
 										 kwlist,
 										 &server, &callback, &user_data))
 		{
@@ -448,7 +439,7 @@
 		Py_INCREF(user_data);
 
 		indicate_listener_server_get_desktop(INDICATE_LISTENER(self->obj),
-											 (IndicateListenerServer *)server, 
+											 server, 
 											 (indicate_listener_get_server_property_cb)_listener_get_server_property_cb,
 											 listener_property_cb_data);
 
@@ -465,7 +456,7 @@
 {
 		static char *kwlist[] = { "server", "callback", "user_data", NULL };
 		ListenerPropertyCbData *listener_property_cb_data;
-		gchar *server;
+		IndicateListenerServer *server;
 		PyGILState_STATE state;
 		PyObject *callback, *user_data = Py_None;
 		size_t len;
@@ -483,7 +474,7 @@
 		}
 
 		if (!PyArg_ParseTupleAndKeywords(args, kwargs,
-										 "sO|O:IndicateListener.server_get_type",
+										 "OO|O:IndicateListener.server_get_type",
 										 kwlist,
 										 &server, &callback, &user_data))
 		{
@@ -505,7 +496,7 @@
 		Py_INCREF(user_data);
 
 		indicate_listener_server_get_type(INDICATE_LISTENER(self->obj),
-										  (IndicateListenerServer *)server, 
+										  server, 
 										  (indicate_listener_get_server_property_cb)_listener_get_server_property_cb,
 										  listener_property_cb_data);
 
@@ -514,28 +505,6 @@
 		return Py_None;
 }
 %%
-override indicate_server_get_indicator_count_by_type args
-static PyObject *
-_wrap_indicate_server_get_indicator_count_by_type(PyGObject *self, 
-                                                  PyObject *args)
-{
-        guint count;
-        GError * error = NULL;
-        gchar *type;
-
-        if (!PyArg_ParseTuple(args, 
-                              "s:IndicateServer.get_indicator_count_by_type", 
-                              &type))
-        {
-                return NULL;
-        }
-
-        indicate_server_get_indicator_count_by_type(
-                INDICATE_SERVER(self->obj), type, &count, &error);
-        
-        return PyInt_FromLong(count);
-}
-%%
 override indicate_indicator_list_properties
 static PyObject *
 _wrap_indicate_indicator_list_properties(PyGObject *self)
@@ -563,160 +532,20 @@
 		return pyprop_list;
 }
 %%
-override indicate_server_get_indicator_list
-static PyObject *
-_wrap_indicate_server_get_indicator_list(PyGObject *self)
-{
-        GArray *indicators;
-        GError * error = NULL;
-		PyObject *pyindicators;
-        guint i;
-
-        indicate_server_get_indicator_list(
-                INDICATE_SERVER(self->obj), &indicators, &error);
-        
-		pyindicators = PyList_New (indicators->len);
-
-		for (i=0; i < indicators->len; i++)
-				PyList_SET_ITEM(
-						pyindicators, i,
-						PyInt_FromLong(
-								g_array_index(indicators, guint, i)));
-
-        g_array_free (indicators, TRUE);
-
-		return pyindicators;
-}
-%%
-override indicate_server_get_indicator_list_by_type args
-static PyObject *
-_wrap_indicate_server_get_indicator_list_by_type(PyGObject *self, 
-												 PyObject *args)
-{
-        guint     i;
-        GError   *error = NULL;
-        gchar    *type;
-        GArray   *indicators = NULL;
-		PyObject *pyindicators;
-
-        if (!PyArg_ParseTuple(args, 
-                              "s:IndicateServer.get_indicator_list_by_type", 
-                              &type))
-        {
-                return NULL;
-        }
-
-        indicate_server_get_indicator_list_by_type (
-                INDICATE_SERVER(self->obj), type, &indicators, &error);
-        
-		pyindicators = PyList_New (indicators->len);
-        
-		for (i=0; i < indicators->len; i++) {
-				PyList_SET_ITEM(
-						pyindicators, i,
-						PyInt_FromLong(g_array_index(indicators, guint, i)));
-        }
-
-        g_array_free (indicators, TRUE);
-
-		return pyindicators;
-}
-%%
-override indicate_server_get_indicator_property args
-static PyObject *
-_wrap_indicate_server_get_indicator_property(PyGObject *self, 
-                                             PyObject *args)
-{
-        guint indicator;
-        gchar *property, *value;
-        GError * error = NULL;
-        PyObject *rv;
-
-        if (!PyArg_ParseTuple(args, 
-                              "is:IndicateServer.get_indicator_property", 
-                              &indicator, &property))
-        {
-                return NULL;
-        }
-        
-        indicate_server_get_indicator_property (INDICATE_SERVER(self->obj),
-                                                indicator, property, &value,
-                                                &error);
-        rv = PyString_FromString(value);
-
-        g_free(value);
-        
-        return rv;
-}
-%%
-override indicate_server_get_indicator_property_group args
-static PyObject *
-_wrap_indicate_server_get_indicator_property_group(PyGObject *self, 
-												   PyObject *args)
-{
-        guint indicator, i;
-		GPtrArray *properties;
-		PyObject *pyproperties, *pyvalue;
-        gchar **value;
-        GError * error = NULL;
-        gboolean success;
-
-        if (!PyArg_ParseTuple(
-					args, 
-					"iO!:IndicateServer.get_indicator_property_group", 
-					&indicator, &PyList_Type, &pyproperties))
-        {
-                return NULL;
-        }
-        
-		properties = g_ptr_array_sized_new(PyList_Size(pyproperties));
-		
-		for (i=0;i<PyList_Size(pyproperties);i++) {
-				PyObject *item = PyList_GetItem(pyproperties,i);
-				if(!PyString_Check(item)) {
-						PyErr_SetString(PyExc_TypeError,
-										"list item not a string");
-						return NULL;
-				}
-				g_ptr_array_add(properties, PyString_AsString(item));
-		}
-
-        success = indicate_server_get_indicator_property_group (
-				INDICATE_SERVER(self->obj), indicator, properties, &value, 
-				&error);
-
-        g_ptr_array_free(properties, TRUE);
-
-        pyvalue = PyList_New (0);
-        
-        i = 0;
-
-		while (value[i] != NULL && success) {
-                PyList_Append(
-						pyvalue, PyString_FromString(value[i]));
-                g_free(value[i]);
-                i++;
-        }
-
-        g_free(value);
-
-		return pyvalue;
-}
-%%
 override indicate_listener_display args
 static PyObject *
 _wrap_indicate_listener_display(PyGObject *self, PyObject *args, PyObject *kwarg)
 {
-        char *server;
-        guint indicator = 0;
+        IndicateListenerServer *server;
+        IndicateListenerIndicator *indicator = NULL;
 
-        if (!PyArg_ParseTuple(args, "si:IndicateListener.display",
+        if (!PyArg_ParseTuple(args, "OO:IndicateListener.display",
                               &server, &indicator))
                 return NULL;
 
         indicate_listener_display(
                 INDICATE_LISTENER(self->obj), server, 
-                (IndicateListenerIndicator *)indicator);
+                indicator);
     
         Py_INCREF(Py_None);
         return Py_None;

